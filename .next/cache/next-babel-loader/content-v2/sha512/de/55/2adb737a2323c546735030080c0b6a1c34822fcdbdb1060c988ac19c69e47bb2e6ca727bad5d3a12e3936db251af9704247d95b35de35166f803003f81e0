{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\nimport style from './../../styles/modal.module.scss';\nimport Image from \"next/image\";\nimport Link from 'next/link';\nimport axiosHandler from './../../Axios/AxiosConfig';\nimport axios from 'axios';\nexport default function SignUp(props) {\n  const initialState = {\n    fullName: false,\n    userName: false,\n    email: false,\n    password: false,\n    privacyPolicy: false\n  };\n  const {\n    0: form,\n    1: setForm\n  } = useState(initialState);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n\n  let isFormValid = () => {\n    const {\n      fullName,\n      userName,\n      email,\n      password,\n      privacyPolicy\n    } = form;\n    return fullName && userName && email && password && privacyPolicy;\n  };\n\n  let handleInput = (e, inputName) => {\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      [inputName]: e.target.value\n    }));\n    if (!!errors[inputName]) setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n      [inputName]: null\n    }));\n  };\n\n  let handleCheckBox = () => {\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      privacyPolicy: !form.privacyPolicy\n    }));\n  };\n\n  const findFormErrors = () => {\n    const {\n      fullName,\n      userName,\n      email,\n      password,\n      privacyPolicy\n    } = form;\n    const newErrors = {}; // fullName validation\n\n    if (!fullName || fullName === '') newErrors.fullName = 'Can not be blank!';else if (fullName.length < 3) newErrors.fullName = 'Full name is too short!';else if (fullName.length > 30) newErrors.fullName = 'Full name is too long!';else if (!/^[a-z]{3,}([',. -][a-z]{3,})*$/.test(fullName)) {\n      newErrors.fullName = 'You can only use lowercase letters!';\n    } // userName validation\n\n    if (userName.length < 3) newErrors.userName = 'User name is too short!';else if (userName.length > 30) newErrors.userName = 'USer name is too long!';else if (!userName || userName === '') newErrors.userName = 'Can not be blank!';\n\n    if (!/^[a-z]+/.test(userName)) {\n      newErrors.userName = 'Input must start with normal char!';\n    } else if (/(\\s)+/.test(userName)) {\n      newErrors.userName = 'have space bar';\n    } else if (/[A-Z]+/.test(userName)) {\n      newErrors.userName = 'have Caital char';\n    } else if (/[!@#$%^&*()\\-+={}[\\]|\\\\;:'\",<.>\\/?]{1,}/.test(userName)) {\n      newErrors.userName = 'special char';\n    } //email validation\n\n\n    if (!email || email === '') newErrors.email = 'Can not be blank!';else if (email.length < 2) newErrors.email = 'User name is too short!';else if (!email.match(/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,15}/g)) newErrors.email = 'Email is not valid'; //password validation\n\n    if (!password || password === '') newErrors.password = 'Can not be blank!';else if (password.length < 6) newErrors.password = 'Password must be at least 6 character';else if (password.length > 30) newErrors.password = 'Password is too long!';\n    return newErrors;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); // get our new errors\n\n    const newErrors = findFormErrors(); // Conditional logic:\n\n    if (Object.keys(newErrors).length > 0) {\n      // We got errors!\n      setErrors(newErrors);\n    } else {\n      axiosHandler.post('user/setuser', _objectSpread({}, form)).then(response => {\n        console.log(response);\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Modal.Header, {\n    className: `${style.modalHeader} position-relative`\n  }, __jsx(\"button\", {\n    onClick: () => props.modalAction(),\n    type: \"button\",\n    className: `${style.close} position-absolute bg-white border border-white p-0`\n  }, __jsx(Image, {\n    src: \"/svg/close.svg\",\n    height: 30,\n    width: 30\n  })), __jsx(Modal.Title, {\n    className: `${style.modalTitle} font-weight-normal`,\n    id: \"contained-modal-title-vcenter\"\n  }, \"Sign Up\")), __jsx(Modal.Body, {\n    className: \"mx-4 px-0\"\n  }, __jsx(\"div\", {\n    className: \"social-login d-flex my-4 pb-2\"\n  }, __jsx(Link, {\n    href: \"http://google.com\",\n    passHref: true\n  }, __jsx(Button, {\n    className: \"border mr-3 flex-grow-1\",\n    variant: \"light\"\n  }, __jsx(\"img\", {\n    src: \"/svg/google.svg\",\n    className: \"mr-1\",\n    height: 24,\n    width: 24\n  }), \"Sign up with Google\")), __jsx(Link, {\n    href: \"http://facebook.com\",\n    passHref: true\n  }, __jsx(Button, {\n    variant: \"info\"\n  }, __jsx(\"img\", {\n    src: \"/svg/facebook.svg\",\n    height: 24,\n    width: 24\n  })))), __jsx(\"hr\", {\n    className: `${style.divider} divider my-4`\n  }), __jsx(\"div\", {\n    className: \"social-login d-flex mt-4\"\n  }, __jsx(Form, {\n    className: \"w-100\",\n    onSubmit: e => handleSubmit(e),\n    noValidate: true\n  }, __jsx(Row, {\n    className: \"mb-4\"\n  }, __jsx(Col, null, __jsx(Form.Control, {\n    onChange: e => handleInput(e, 'fullName'),\n    placeholder: \"Full Name\",\n    isInvalid: !!errors.fullName\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    tooltip: true,\n    style: {\n      left: '15px'\n    }\n  }, errors.fullName)), __jsx(Col, null, __jsx(Form.Control, {\n    onChange: e => handleInput(e, 'userName'),\n    placeholder: \"User name\",\n    isInvalid: !!errors.userName\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    tooltip: true,\n    style: {\n      left: '15px'\n    }\n  }, errors.userName))), __jsx(Form.Group, {\n    className: \"mb-4 position-relative\",\n    controlId: \"formGroupEmail\"\n  }, __jsx(Form.Control, {\n    onChange: e => handleInput(e, 'email'),\n    type: \"email\",\n    placeholder: \"Enter email\",\n    isInvalid: !!errors.email\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    tooltip: true\n  }, errors.email)), __jsx(Form.Group, {\n    controlId: \"formGroupPassword\",\n    className: \"mb-4 position-relative\"\n  }, __jsx(Form.Control, {\n    onChange: e => handleInput(e, 'password'),\n    type: \"password\",\n    placeholder: \"Password\",\n    isInvalid: !!errors.password\n  }), __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    tooltip: true\n  }, errors.password)), __jsx(Col, {\n    className: \"p-0\"\n  }, __jsx(\"div\", {\n    className: \"custom-control custom-checkbox mr-sm-2\"\n  }, __jsx(\"input\", {\n    onChange: () => handleCheckBox('privacyPolicy'),\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    id: \"customControlAutosizing\"\n  }), __jsx(\"label\", {\n    className: \"custom-control-label\",\n    htmlFor: \"customControlAutosizing\"\n  }, \"Creating an account means you\\u2019re okay with our Terms of Service, and Privacy Policy.\"))), __jsx(Col, {\n    className: \"my-4\"\n  }, __jsx(Button, {\n    type: \"submit\",\n    size: \"md\",\n    block: true,\n    variant: \"danger\",\n    disabled: !isFormValid()\n  }, \"Create Account\"))))), __jsx(Modal.Footer, {\n    className: \"d-flex justify-content-end\"\n  }, __jsx(\"div\", {\n    onClick: () => props.signInAction(),\n    className: \"py-2\"\n  }, \"Already a member? \", __jsx(\"span\", {\n    className: \"text-primary cursor-pointer\"\n  }, \"Sign In\"))));\n}","map":null,"metadata":{},"sourceType":"module"}